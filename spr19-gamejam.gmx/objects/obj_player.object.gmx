<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_r</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

// Color stuff
color = 'r'; // {r, g, b}
red = 0; // [0, inf)
green = 0; // [0, inf)
blue = 0; // [0, inf)

// scoring
health = 3; // [0, 100]
score = 0; // [0, inf)

// movement
sp = 16;
y_dir = sp;
x_dir = sp;

// attack
attack_type = 0;
stream = 1; // projectiles per attack
spread = 0;
cooldown = 6; // at 30 fps
frames = 0;

// global vars, move somewhere else later
global.scale_factor = 1; // **THIS IS NOW DEFUNCT; DO NOT DELETE YET; MUST REMOVE ALL REFERENCES TO IT**
global.frames = 30; // in case we change frame rate later; game was designed at 30 fps
global.pause = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Blending Mode

draw_set_blend_mode(bm_add);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

if not(global.pause) {
  // for instantenous switching
  if (keyboard_check_pressed(vk_up))
    y_dir = -1 * sp;
  else if (keyboard_check_pressed(vk_down))
    y_dir = sp;
  if (keyboard_check_pressed(vk_left))
    x_dir = -1 * sp;
  else if (keyboard_check_pressed(vk_right))
    x_dir = sp;
   
  // to fix locking direction after tapping button
  if (keyboard_check_released(vk_up) and keyboard_check(vk_down))
    y_dir = sp;
  else if (keyboard_check_released(vk_down) and keyboard_check(vk_up))
    y_dir = -1 * sp;
  if (keyboard_check_released(vk_left) and keyboard_check(vk_right))
    x_dir = sp;
  else if (keyboard_check_released(vk_right) and keyboard_check(vk_left))
    x_dir = -1 * sp;
        
  // actual movement
  if (keyboard_check(vk_up) or keyboard_check(vk_down))
    y += (global.scale_factor * y_dir) / (global.frames / 30);
  if (keyboard_check(vk_right) or keyboard_check(vk_left))
    x += (global.scale_factor * x_dir) / (global.frames / 30);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Color

if (not(global.pause) and keyboard_check_pressed(ord('Z'))) {
  if (color == 'r')
    color = 'g';
  else if (color == 'g')
    color = 'b';
  else if (color == 'b')
    color = 'r';
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variable Management

if red &gt; 255
  red = 255;
  
if health &lt; 1
  room_restart();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attacking

if not(global.pause) {
  frames++;
  if (keyboard_check(ord('X'))) and (frames &gt;= cooldown * (global.frames / 30)) and
    (red &gt; 0) and (green &gt; 0) and (blue &gt; 0) {
    switch(attack_type) {
      case 0: // standard attack type
      for (i = -1 * floor(stream / 2); i &lt; ceil(stream / 2); i++) {
        bullet = instance_create(x, y, obj_player_projectile_1);
        bullet.sp = 16;
        bullet.speed = 16;
        bullet.dummy_speed = 16;
        bullet.movement_ai = 0;
        bullet.damage_ai =  1;
        bullet.sprite_index = spr_player_projectilie_1;
        bullet.direction = image_angle + (spread * i);
        bullet.image_angle = image_angle + (spread * i) + 90;
        bullet.xscale = 0;
        bullet.yscale = 0;
      }
      red--;
      green--;
      blue--;
      frames = 0;
      break;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Map Bounding

if (x &lt; 32)
  x = 32;
else if (x &gt; room_width - 32)
  x = room_width - 32;
if (y &lt; 32)
  y = 32;
else if (y &gt; room_height - 32)
  y = room_height - 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_template_projectile_1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision Logic

if not(global.pause) {
  var bullet = other;
  if (bullet.armed) {
    if (bullet.color == color) and (color == 'r')
      red++;
    else if (bullet.color == color) and (color == 'g')
      green++;
    else if (bullet.color == color) and (color == 'b')
      blue++;
    else
      health--;
    bullet.armed = false;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Color
if not(global.pause) {
  if (color == 'r')
    sprite_index = spr_player_r;
  if (color == 'g')
    sprite_index = spr_player_g;
  if (color == 'b')
    sprite_index = spr_player_b;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drawing 'GUI'

draw_set_font(ft_temp);
draw_text_colour(32, 32, "Lives: " + string(health) + " | R: " + string(red) + 
  " | G: " + string(green) + " | B: " + string(blue), c_white, c_white, c_white, c_white, 255);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
